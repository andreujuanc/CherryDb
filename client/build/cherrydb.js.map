{"version":3,"file":"cherrydb.js","sources":["../src/sync/index.ts","../src/data/Record.ts","../src/endpoint/Remote.ts","../src/endpoint/FetchRequest.ts","../src/main.ts"],"sourcesContent":["import IStore from \"../data/IStore\";\r\nimport Remote from \"../endpoint/Remote\";\r\n\r\nexport default class Sync {\r\n    private _data: IStore;\r\n    private _remote: Remote;\r\n    public OnSyncCompleted: Function;\r\n\r\n    constructor(data: IStore, remote: Remote) {\r\n        this._data = data;\r\n        this._remote = remote;\r\n    }\r\n\r\n    async Pull() {\r\n        try {\r\n            const TS = this._data.GetLastRecordTimeStamp();\r\n            //console.log('Last record', lastRecord)\r\n            const remoteData = await this._remote.getNewRecordsFrom(TS);\r\n            this._data.Upsert(remoteData);\r\n            if (this.OnSyncCompleted) this.OnSyncCompleted();\r\n\r\n            return 1;\r\n        }\r\n        catch (ex) {\r\n            throw ex;\r\n        }\r\n    }\r\n\r\n    async Push(){\r\n        try{\r\n            let pushData = await this._data.GetPushData();\r\n            let pushResult = await this._remote.Send(pushData);\r\n            await this._data.ClearPushData(pushResult);\r\n        }\r\n        catch (ex) {\r\n            throw ex;\r\n        }\r\n    }\r\n\r\n    async PollSync() {\r\n        await this.Push();\r\n        await this.Pull();\r\n        setTimeout(()=>this.PollSync(), 2000);\r\n    }\r\n}","import IRecord from './IRecord';\r\n\r\nexport default  class Record implements IRecord {\r\n    id: string;    \r\n    timestamp: number;\r\n}","import IRecord from \"../data/IRecord\";\r\nimport Record from \"../data/Record\";\r\nimport IRequest from \"./IRequest\";\r\n//import { Promise } from \"es6-promise\";\r\n\r\nconst mapToRecord = (item) => Object.assign(new Record(), item);\r\n\r\nexport default class Remote {\r\n\r\n    private _endpoint: string;\r\n    private _request: IRequest;\r\n    private _path: string = '/cherrydb';\r\n\r\n    constructor(endpoint: string, request: IRequest) {\r\n        this._endpoint = endpoint;\r\n        this._request = request;\r\n    }\r\n\r\n    async getNewRecordsFrom(timestamp: number): Promise<Record[]> {\r\n        let response = await this._request.fetch(`${this._endpoint}${this._path}/from/${timestamp}`, {\r\n           // mode:'no-cors'\r\n        });\r\n        if (!response.ok)\r\n            return [];\r\n        let items = await response.json();\r\n        if (Array.isArray(items))\r\n            items.map(mapToRecord);\r\n        return items;\r\n    }\r\n\r\n    async Send(record: IRecord | IRecord[]): Promise<IRecord | IRecord[]> {\r\n        //console.log('posting to ', `${this._endpoint}${this._path}`)\r\n        if(record == null) return Promise.resolve([]);\r\n        const data = JSON.stringify(record);\r\n        var isArray = Array.isArray(record);\r\n        if(Array.isArray(record) && record.length == 0 ) return Promise.resolve([]);\r\n\r\n        //console.log('data', data)\r\n        /**\r\n         * Must do something like this to make it sexier!\r\n         * https://youtu.be/fRgFVNhSJEc?t=55m43s\r\n         */\r\n        return this._request.fetch(`${this._endpoint}${this._path}`, {\r\n            method: 'POST',\r\n            mode:'cors',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: data\r\n        })\r\n            .then((response) => {\r\n                //console.log('response', response.ok)\r\n                if (response.ok)\r\n                    return response.json();\r\n                return [];\r\n            })\r\n            .then(x => isArray ? x.map(mapToRecord) : mapToRecord(x))\r\n            .then(x => {\r\n                //console.log(x);\r\n                return x;\r\n            });\r\n    }\r\n}","import IRequest from \"./IRequest\";\r\n\r\nexport default class FetchRequest implements IRequest{\r\n    fetch(url:string, request:any): Promise<any> {\r\n        console.log('REAL SHIT')\r\n        return fetch.apply(window, arguments);\r\n    }\r\n\r\n}","import Sync from \"./sync/index\";\r\nimport Store from \"./data/stores/MemoryStore\";\r\nimport IStore from \"./data/IStore\";\r\nimport Remote from \"./endpoint/Remote\";\r\nimport FetchRequest from \"./endpoint/FetchRequest\";\r\nimport IRecord from \"./data/IRecord\";\r\n\r\nexport default class CheeryDb {\r\n    private _sync: Sync;\r\n    private _store: IStore;\r\n    private _remote: Remote;\r\n    private _fetchRequest: FetchRequest;\r\n    private _started: boolean = false;\r\n    private _onChangeCallbacks : Function[] = [];\r\n\r\n    constructor(endpoint: string, store: IStore) {\r\n        if (endpoint == null) throw new Error('First argument \"endpoint\" is mandatory');\r\n        if (typeof endpoint != 'string') throw new Error('First argument \"endpoint\" must be a valid url');\r\n        if (endpoint.length < 3) throw new Error('First argument \"endpoint\" must be a valid url');\r\n\r\n        this._store = store;\r\n        this._fetchRequest = new FetchRequest();\r\n        this._remote = new Remote(endpoint, this._fetchRequest);\r\n        this._sync = new Sync(this._store, this._remote);\r\n    }\r\n\r\n    Start(onchangeCallback: Function) {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._sync.OnSyncCompleted  =  onchangeCallback;\r\n\r\n        var syncResult = this._sync.PollSync();\r\n        return true;\r\n    }\r\n\r\n    getStore() {\r\n        return this._store;\r\n    }\r\n\r\n    async Upsert(record: IRecord|IRecord[]) : Promise<IRecord | IRecord[]> {\r\n        return await this._store.Upsert(record);\r\n    }\r\n}"],"names":[],"mappings":"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"}